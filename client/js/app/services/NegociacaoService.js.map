{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_http","HttpService","Promise","resolve","reject","get","then","negociacoes","map","Negociacao","Date","objeto","data","quantidade","valor","catch","console","log","error","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","periodos","reduce","dados","periodo","concat","dado","Error","erro","negociacao","ConnectionFactory","getConnection","NegociacaoDao","connection","dao","adiciona","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","JSON","stringify","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["class NegociacaoService {\r\n    constructor(){\r\n        this._http = new HttpService();\r\n    }\r\n    obterNegociacoesDaSemana(){\r\n        return new Promise((resolve,reject)=>{\r\n         this._http\r\n            .get('negociacoes/semana')\r\n            .then(negociacoes => {\r\n               resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data),objeto.quantidade,objeto.valor)));\r\n            })\r\n            .catch(error => {\r\n              console.log(error);\r\n              reject('Não foi possível obter as negociações da semana')\r\n            });\r\n          \r\n           /* let xhr = new XMLHttpRequest();\r\n            xhr.open('GET','negociacoes/semana');\r\n            xhr.send();\r\n    \r\n            /*config*/\r\n            /*xhr.onreadystatechange = () => {\r\n               if(xhr.readyState == 4){  //requisição concluída e a resposta está pronta.\r\n                   if(xhr.status == 200){\r\n                        resolve(JSON.parse(xhr.responseText)\r\n                          .map(objeto => new Negociacao(new Date(objeto.data),objeto.quantidade,objeto.valor)));\r\n                         \r\n                   }else{\r\n                        console.log(xhr.responseText);\r\n                        reject('não foi possível obter as negociações');  // callback se passar null.\r\n                       \r\n                   }\r\n               }\r\n            };\r\n            xhr.send(); */\r\n        });\r\n    }\r\nobterNegociacoesDaSemanaRetrasada(){\r\n    return new Promise((resolve,reject)=>{\r\n        this._http\r\n            .get('negociacoes/retrasada')\r\n            .then(negociacoes => {\r\n            resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data),objeto.quantidade,objeto.valor)));\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                reject('Não foi possível obter as negociações da semana')\r\n        });\r\n    });\r\n}\r\n    obterNegociacoesDaSemanaAnterior(){\r\n        return new Promise((resolve,reject)=>{\r\n            this._http\r\n                .get('negociacoes/anterior')\r\n                .then(negociacoes => {\r\n                resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data),objeto.quantidade,objeto.valor)));\r\n                })\r\n                .catch(error => {\r\n                    console.log(error);\r\n                    reject('Não foi possível obter as negociações da semana')\r\n            });\r\n        });\r\n    }\r\n    obterNegociacoes() {\r\n        \r\n        return Promise.all([\r\n            this.obterNegociacoesDaSemana(),\r\n            this.obterNegociacoesDaSemanaAnterior(),\r\n            this.obterNegociacoesDaSemanaRetrasada()\r\n        ]).then(periodos => {\r\n\r\n            let negociacoes = periodos\r\n                .reduce((dados, periodo) => dados.concat(periodo), [])\r\n                .map(dado => new Negociacao(new Date(dado.data), dado.quantidade, dado.valor ));\r\n\r\n            return negociacoes;\r\n        }).catch(erro => {\r\n            throw new Error(erro);\r\n        });\r\n    } \r\n    cadastra(negociacao){\r\n       return ConnectionFactory  // return para permitir quem chamar o cadastra usar o then.\r\n        .getConnection()\r\n        .then(connection => new NegociacaoDao(connection)) \r\n        .then(dao => dao.adiciona(negociacao))\r\n        .then(() => 'Negociação adicionada com sucesso')\r\n        .catch(erro => {\r\n            console.log(erro);\r\n             throw new Error('Não foi possível adicionar a negociação')\r\n        });\r\n    }\r\n    lista(){\r\n        return ConnectionFactory  // return para permitir quem chamar o cadastra usar o then.\r\n        .getConnection()\r\n        .then(connection => new NegociacaoDao(connection)) \r\n        .then(dao => dao.listaTodos())\r\n        .catch(erro => {\r\n            console.log(erro);\r\n            throw new Error ('Não foi possível obter as negociações')\r\n        });\r\n    }\r\n    apaga() {\r\n\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.apagaTodos())\r\n            .then(() => 'Negociações apagadas com sucesso')\r\n            .catch(erro => {\r\n                  console.log(erro);\r\n                  throw new Error('Não foi possível apagar as negociações')\r\n            });\r\n    }\r\n    importa(listaAtual) {\r\n\r\n        return this.obterNegociacoes()\r\n            .then(negociacoes =>\r\n                negociacoes.filter(negociacao =>\r\n                    !listaAtual.some(negociacaoExistente =>\r\n                        JSON.stringify(negociacao) == JSON.stringify(negociacaoExistente)))\r\n            )\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error(\"Não foi possível importar as negociações\");\r\n            });\r\n    }\r\n}"]}
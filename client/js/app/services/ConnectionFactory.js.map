{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA,IAAIA,oBAAuB,YAAW;AAClC,QAAMC,SAAS,CAAC,aAAD,CAAf;AACA,QAAMC,UAAU,CAAhB;AACA,QAAMC,SAAS,YAAf,CAHkC,CAGJ;;AAE9B,QAAIC,aAAa,IAAjB;AACA,QAAIC,QAAQ,IAAZ;;AAEA;AACI,qCAAa;AAAA;;AACX,kBAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACD;;AAHL;AAAA;AAAA,4CAI0B;AACnB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAASC,MAAT,EAAoB;AACpC,wBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA6BD,OAA7B,CAAlB;;AAEAQ,gCAAYI,eAAZ,GAA8B,aAAK;AACjCd,0CAAkBe,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACD,qBAFD;AAGAR,gCAAYS,SAAZ,GAAwB,aAAK;AACzB,4BAAG,CAACf,UAAJ,EAAe;AACXA,yCAAaY,EAAEC,MAAF,CAASC,MAAtB;AACAb,oCAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACAA,uCAAWC,KAAX,GAAmB,YAAU;AAC1B,sCAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN,CAD0B,CACuC;AACnE,6BAFD;AAGJ;AACCE,gCAAQJ,UAAR;AACJ,qBATD;AAUAM,gCAAYW,OAAZ,GAAsB,aAAK;AACzBC,gCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,+BAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACD,qBAHD;AAKF,iBArBM,CAAP;AAsBF;AA3BL;AAAA;AAAA,0CA4ByBrB,UA5BzB,EA4BoC;AAC5BH,uBAAOyB,OAAP,CAAe,iBAAS;AACpB,wBAAItB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAiDzB,WAAW0B,iBAAX,CAA6BD,KAA7B;AACjDzB,+BAAW2B,iBAAX,CAA6BF,KAA7B,EAAoC,EAACG,eAAe,IAAhB,EAApC;AACH,iBAHD;AAIH;AAjCL;AAAA;AAAA,8CAkC4B;AACtB,oBAAG5B,UAAH,EAAc;AACVC;AACAD,iCAAa,IAAb;AACH;AACF;AAvCL;;AAAA;AAAA;AA2CH,CAnDyB,EAA1B","file":"ConnectionFactory.js","sourcesContent":["var ConnectionFactory  =  (function (){\r\n    const stores = ['negociacoes'];\r\n    const version = 4;\r\n    const dbName = 'aluraframe';  // não permite trocar o valor, pois é um constante.\r\n    \r\n    var connection = null;\r\n    var close = null;\r\n    \r\n    return class ConnectionFactory {\r\n        constructor(){\r\n          throw new Error('Não é possível criar instancias de ConnectionFactory');\r\n        }\r\n        static getConnection(){\r\n           return new Promise((resolve,reject) => {\r\n              let openRequest = window.indexedDB.open(dbName,version);\r\n    \r\n              openRequest.onupgradeneeded = e => {\r\n                ConnectionFactory._createStores(e.target.result);\r\n              };\r\n              openRequest.onsuccess = e => {\r\n                  if(!connection){\r\n                      connection = e.target.result; \r\n                      close = connection.close.bind(connection);\r\n                      connection.close = function(){\r\n                         throw new Error('Você não pode fechar a conexão diretamente.');  // Monkey Patch\r\n                      };\r\n                 };\r\n                   resolve(connection);\r\n              };\r\n              openRequest.onerror = e => {\r\n                console.log(e.target.error);\r\n                reject(e.target.error.name);\r\n              };\r\n            \r\n           });\r\n        }\r\n        static _createStores(connection){\r\n            stores.forEach(store => {\r\n                if (connection.objectStoreNames.contains(store)) connection.deleteObjectStore(store);\r\n                connection.createObjectStore(store, {autoIncrement: true});\r\n            });\r\n        }\r\n        static closeConnection(){\r\n          if(connection){\r\n              close();\r\n              connection = null;\r\n          }\r\n        }\r\n    }\r\n   \r\n    \r\n})();\r\n\r\n"]}